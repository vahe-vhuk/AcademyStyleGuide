{"ast":null,"code":"const code1 = \"#ifndef FOO_BAR_BAZ_H_\\n\" + \"#define FOO_BAR_BAZ_H_\\n\" + \"\\n\" + \"...\\n\" + \"\\n\" + \"#endif  // FOO_BAR_BAZ_H_\";\nconst code2 = \"// In a C++ source file:\\n\" + \"class B;\\n\" + \"void FuncInB();\\n\" + \"extern int variable_in_b;\\n\" + \"ABSL_DECLARE_FLAG(flag_in_b);\\n\";\nconst code3 = \"// b.h:\\n\" + \"struct B {};\\n\" + \"struct D : B {};\\n\" + \"\\n\" + \"// good_user.cc:\\n\" + \"#include \\\"b.h\\\"\\n\" + \"void f(B*);\\n\" + \"void f(void*);\\n\" + \"void test(D* x) { f(x); }  // Calls f(B*)\";\nconst code4 = \"#include \\\"base/logging.h\\\"\";\nconst code5 = \"#include \\\"foo/server/fooserver.h\\\"\\n\" + \"\\n\" + \"#include <sys/types.h>\\n\" + \"#include <unistd.h>\\n\" + \"\\n\" + \"#include <string>\\n\" + \"#include <vector>\\n\" + \"\\n\" + \"#include \\\"base/basictypes.h\\\"\\n\" + \"#include \\\"foo/server/bar.h\\\"\\n\" + \"#include \\\"third_party/absl/flags/flag.h\\\"\\n\";\nconst code6 = \"#include \\\"foo/public/fooserver.h\\\"\\n\" + \"\\n\" + \"#include \\\"base/port.h\\\"  // For LANG_CXX11.\\n\" + \"\\n\" + \"#ifdef LANG_CXX11\\n\" + \"#include <initializer_list>\\n\" + \"#endif  // LANG_CXX11\\n\";\nconst code7 = \"namespace outer {\\n\" + \"inline namespace inner {\\n\" + \"  void foo();\\n\" + \"}  // namespace inner\\n\" + \"}  // namespace outer\\n\";\nconst code8 = \"// In the .h file\\n\" + \"namespace mynamespace {\\n\" + \"\\n\" + \"// All declarations are within the namespace scope.\\n\" + \"// Notice the lack of indentation.\\n\" + \"class MyClass {\\n\" + \" public:\\n\" + \"  ...\\n\" + \"  void Foo();\\n\" + \"};\\n\" + \"\\n\" + \"}  // namespace mynamespace\\n\" + \"\\n\" + \"\\n\" + \"// In the .cc file\\n\" + \"namespace mynamespace {\\n\" + \"\\n\" + \"// Definition of functions is within scope of the namespace.\\n\" + \"void MyClass::Foo() {\\n\" + \"  ...\\n\" + \"}\\n\" + \"\\n\" + \"}  // namespace mynamespace\\n\";\nconst code9 = \"#include \\\"a.h\\\"\\n\" + \"\\n\" + \"ABSL_FLAG(bool, someflag, false, \\\"a flag\\\");\\n\" + \"\\n\" + \"namespace mynamespace {\\n\" + \"\\n\" + \"using ::foo::Bar;\\n\" + \"\\n\" + \"...code for mynamespace...    // Code goes against the left margin.\\n\";\nconst code10 = \"// Shorten access to some commonly used names in .cc files.\\n\" + \"namespace baz = ::foo::bar::baz;\\n\" + \"\\n\" + \"// Shorten access to some commonly used names (in a .h file).\\n\" + \"namespace librarian {\\n\" + \"namespace internal {  // Internal, not part of the API.\\n\" + \"namespace sidetable = ::pipeline_diagnostics::sidetable;\\n\" + \"}  // namespace internal\\n\" + \"\\n\" + \"inline void my_inline_function() {\\n\" + \"  // namespace alias local to a function (or method).\\n\" + \"  namespace baz = ::foo::bar::baz;\\n\" + \"  ...\\n\" + \"}\\n\" + \"}  // namespace librarian\";\nconst code11 = \"namespace {\\n\" + \"...\\n\" + \"}  // namespace\";\nconst code12 = \"int i;\\n\" + \"i = f();      // Bad -- initialization separate from declaration.\\n\" + \"\\n\" + \"int i = f();  // Good -- declaration has initialization.\\n\" + \"\\n\" + \"int jobs = NumJobs();\\n\" + \"// More code...\\n\" + \"f(jobs);      // Bad -- declaration separate from use.\\n\" + \"\\n\" + \"int jobs = NumJobs();\\n\" + \"f(jobs);      // Good -- declaration immediately (or closely) followed by use.\\n\" + \"\\n\" + \"std::vector<int> v;\\n\" + \"v.push_back(1);  // Prefer initializing using brace initialization.\\n\" + \"v.push_back(2);\\n\" + \"std::vector<int> v = {1, 2};  // Good -- v starts initialized.\";\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n  code1,\n  code2,\n  code3,\n  code4,\n  code5,\n  code6,\n  code7,\n  code8,\n  code9,\n  code10,\n  code11\n};","map":{"version":3,"names":["code1","code2","code3","code4","code5","code6","code7","code8","code9","code10","code11","code12"],"sources":["/Users/picsartacademy/PycharmProjects/untitled/src/codes/cpp.js"],"sourcesContent":["\n\n\n\nconst code1 = \"#ifndef FOO_BAR_BAZ_H_\\n\" +\n    \"#define FOO_BAR_BAZ_H_\\n\" +\n    \"\\n\" +\n    \"...\\n\" +\n    \"\\n\" +\n    \"#endif  // FOO_BAR_BAZ_H_\";\n\nconst code2 = \"// In a C++ source file:\\n\" +\n    \"class B;\\n\" +\n    \"void FuncInB();\\n\" +\n    \"extern int variable_in_b;\\n\" +\n    \"ABSL_DECLARE_FLAG(flag_in_b);\\n\";\n\nconst code3 = \"// b.h:\\n\" +\n    \"struct B {};\\n\" +\n    \"struct D : B {};\\n\" +\n    \"\\n\" +\n    \"// good_user.cc:\\n\" +\n    \"#include \\\"b.h\\\"\\n\" +\n    \"void f(B*);\\n\" +\n    \"void f(void*);\\n\" +\n    \"void test(D* x) { f(x); }  // Calls f(B*)\";\n\nconst code4 = \"#include \\\"base/logging.h\\\"\";\n\nconst code5 = \"#include \\\"foo/server/fooserver.h\\\"\\n\" +\n    \"\\n\" +\n    \"#include <sys/types.h>\\n\" +\n    \"#include <unistd.h>\\n\" +\n    \"\\n\" +\n    \"#include <string>\\n\" +\n    \"#include <vector>\\n\" +\n    \"\\n\" +\n    \"#include \\\"base/basictypes.h\\\"\\n\" +\n    \"#include \\\"foo/server/bar.h\\\"\\n\" +\n    \"#include \\\"third_party/absl/flags/flag.h\\\"\\n\";\n\n\nconst code6 = \"#include \\\"foo/public/fooserver.h\\\"\\n\" +\n    \"\\n\" +\n    \"#include \\\"base/port.h\\\"  // For LANG_CXX11.\\n\" +\n    \"\\n\" +\n    \"#ifdef LANG_CXX11\\n\" +\n    \"#include <initializer_list>\\n\" +\n    \"#endif  // LANG_CXX11\\n\";\n\nconst code7 = \"namespace outer {\\n\" +\n    \"inline namespace inner {\\n\" +\n    \"  void foo();\\n\" +\n    \"}  // namespace inner\\n\" +\n    \"}  // namespace outer\\n\"\n\n\nconst code8 = \"// In the .h file\\n\" +\n    \"namespace mynamespace {\\n\" +\n    \"\\n\" +\n    \"// All declarations are within the namespace scope.\\n\" +\n    \"// Notice the lack of indentation.\\n\" +\n    \"class MyClass {\\n\" +\n    \" public:\\n\" +\n    \"  ...\\n\" +\n    \"  void Foo();\\n\" +\n    \"};\\n\" +\n    \"\\n\" +\n    \"}  // namespace mynamespace\\n\" +\n    \"\\n\" +\n    \"\\n\" +\n    \"// In the .cc file\\n\" +\n    \"namespace mynamespace {\\n\" +\n    \"\\n\" +\n    \"// Definition of functions is within scope of the namespace.\\n\" +\n    \"void MyClass::Foo() {\\n\" +\n    \"  ...\\n\" +\n    \"}\\n\" +\n    \"\\n\" +\n    \"}  // namespace mynamespace\\n\";\n\nconst code9 = \"#include \\\"a.h\\\"\\n\" +\n    \"\\n\" +\n    \"ABSL_FLAG(bool, someflag, false, \\\"a flag\\\");\\n\" +\n    \"\\n\" +\n    \"namespace mynamespace {\\n\" +\n    \"\\n\" +\n    \"using ::foo::Bar;\\n\" +\n    \"\\n\" +\n    \"...code for mynamespace...    // Code goes against the left margin.\\n\";\n\nconst code10 = \"// Shorten access to some commonly used names in .cc files.\\n\" +\n    \"namespace baz = ::foo::bar::baz;\\n\" +\n    \"\\n\" +\n    \"// Shorten access to some commonly used names (in a .h file).\\n\" +\n    \"namespace librarian {\\n\" +\n    \"namespace internal {  // Internal, not part of the API.\\n\" +\n    \"namespace sidetable = ::pipeline_diagnostics::sidetable;\\n\" +\n    \"}  // namespace internal\\n\" +\n    \"\\n\" +\n    \"inline void my_inline_function() {\\n\" +\n    \"  // namespace alias local to a function (or method).\\n\" +\n    \"  namespace baz = ::foo::bar::baz;\\n\" +\n    \"  ...\\n\" +\n    \"}\\n\" +\n    \"}  // namespace librarian\";\n\nconst code11 = \"namespace {\\n\" +\n    \"...\\n\" +\n    \"}  // namespace\";\n\nconst code12 = \"int i;\\n\" +\n    \"i = f();      // Bad -- initialization separate from declaration.\\n\" +\n    \"\\n\" +\n    \"int i = f();  // Good -- declaration has initialization.\\n\" +\n    \"\\n\" +\n    \"int jobs = NumJobs();\\n\" +\n    \"// More code...\\n\" +\n    \"f(jobs);      // Bad -- declaration separate from use.\\n\" +\n    \"\\n\" +\n    \"int jobs = NumJobs();\\n\" +\n    \"f(jobs);      // Good -- declaration immediately (or closely) followed by use.\\n\" +\n    \"\\n\" +\n    \"std::vector<int> v;\\n\" +\n    \"v.push_back(1);  // Prefer initializing using brace initialization.\\n\" +\n    \"v.push_back(2);\\n\" +\n    \"std::vector<int> v = {1, 2};  // Good -- v starts initialized.\";\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n    code1,\n    code2,\n    code3,\n    code4,\n    code5,\n    code6,\n    code7,\n    code8,\n    code9,\n    code10,\n    code11,\n}\n\n"],"mappings":"AAIA,MAAMA,KAAK,GAAG,0BAA0B,GACpC,0BAA0B,GAC1B,IAAI,GACJ,OAAO,GACP,IAAI,GACJ,2BAA2B;AAE/B,MAAMC,KAAK,GAAG,4BAA4B,GACtC,YAAY,GACZ,mBAAmB,GACnB,6BAA6B,GAC7B,iCAAiC;AAErC,MAAMC,KAAK,GAAG,WAAW,GACrB,gBAAgB,GAChB,oBAAoB,GACpB,IAAI,GACJ,oBAAoB,GACpB,oBAAoB,GACpB,eAAe,GACf,kBAAkB,GAClB,2CAA2C;AAE/C,MAAMC,KAAK,GAAG,6BAA6B;AAE3C,MAAMC,KAAK,GAAG,uCAAuC,GACjD,IAAI,GACJ,0BAA0B,GAC1B,uBAAuB,GACvB,IAAI,GACJ,qBAAqB,GACrB,qBAAqB,GACrB,IAAI,GACJ,kCAAkC,GAClC,iCAAiC,GACjC,8CAA8C;AAGlD,MAAMC,KAAK,GAAG,uCAAuC,GACjD,IAAI,GACJ,gDAAgD,GAChD,IAAI,GACJ,qBAAqB,GACrB,+BAA+B,GAC/B,yBAAyB;AAE7B,MAAMC,KAAK,GAAG,qBAAqB,GAC/B,4BAA4B,GAC5B,iBAAiB,GACjB,yBAAyB,GACzB,yBAAyB;AAG7B,MAAMC,KAAK,GAAG,qBAAqB,GAC/B,2BAA2B,GAC3B,IAAI,GACJ,uDAAuD,GACvD,sCAAsC,GACtC,mBAAmB,GACnB,YAAY,GACZ,SAAS,GACT,iBAAiB,GACjB,MAAM,GACN,IAAI,GACJ,+BAA+B,GAC/B,IAAI,GACJ,IAAI,GACJ,sBAAsB,GACtB,2BAA2B,GAC3B,IAAI,GACJ,gEAAgE,GAChE,yBAAyB,GACzB,SAAS,GACT,KAAK,GACL,IAAI,GACJ,+BAA+B;AAEnC,MAAMC,KAAK,GAAG,oBAAoB,GAC9B,IAAI,GACJ,iDAAiD,GACjD,IAAI,GACJ,2BAA2B,GAC3B,IAAI,GACJ,qBAAqB,GACrB,IAAI,GACJ,uEAAuE;AAE3E,MAAMC,MAAM,GAAG,+DAA+D,GAC1E,oCAAoC,GACpC,IAAI,GACJ,iEAAiE,GACjE,yBAAyB,GACzB,2DAA2D,GAC3D,4DAA4D,GAC5D,4BAA4B,GAC5B,IAAI,GACJ,sCAAsC,GACtC,yDAAyD,GACzD,sCAAsC,GACtC,SAAS,GACT,KAAK,GACL,2BAA2B;AAE/B,MAAMC,MAAM,GAAG,eAAe,GAC1B,OAAO,GACP,iBAAiB;AAErB,MAAMC,MAAM,GAAG,UAAU,GACrB,qEAAqE,GACrE,IAAI,GACJ,4DAA4D,GAC5D,IAAI,GACJ,yBAAyB,GACzB,mBAAmB,GACnB,0DAA0D,GAC1D,IAAI,GACJ,yBAAyB,GACzB,kFAAkF,GAClF,IAAI,GACJ,uBAAuB,GACvB,uEAAuE,GACvE,mBAAmB,GACnB,gEAAgE;;AAEpE;AACA,eAAe;EACXX,KAAK;EACLC,KAAK;EACLC,KAAK;EACLC,KAAK;EACLC,KAAK;EACLC,KAAK;EACLC,KAAK;EACLC,KAAK;EACLC,KAAK;EACLC,MAAM;EACNC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}